/*Matthew Hayes
 *Tuesday 6-9pm
 *GENG1003
 *Assignment 1
 *This program will the single roots of a quadratic equation to be estimated by the Bisection Method.
 *The information will be inputted from a data file which will provide values of the coefficients of the quadratic polynomial
 *which will also estimate the range of values overs which the roots might be found.
 */


#include "stdafx.h"
#include "math.h"
#define A_VAR  1.0											/*Constant variable 'a' is used for the first coefficient in the quadratic polynomial*/
#define PRECISION 0.000001									/*Constant variable 'precision' is used for the accuracy for the function values fx, fxh and f_mid*/
#define H 0.1												/*Constant variable 'H' is used for testing an area of the quadratic polynomial by adding it to the Lowerlimit*/

		/*Prototype Functions*/
double polynomial(double, double, double, double, double);	/*Prototype function polynomial is the quadratic equation formula*/
double Bisection_method(double, double);					/*Prototype function Bisection_method is the formula of adding and halfing the total sum or two points*/

int main()
{
	FILE *input1;			/*Variable name of the file being read*/
	int error,				/*Variable used to test for the file being at the location*/
		distinctroot;		/*Variable distinctroot is used to count how many distinct roots are found in each quadratic polynomial*/
	double b,				/*variable 'b' is an input value that is read from the file that fits in the polynomial*/
		c,					/*variable 'c' is an input value that is read from the file that fits in the polynomial*/
		d,					/*variable 'd' is an input value that is read from the file that fits in the polynomial*/
		e,					/*variable 'e' is an input value that is read from the file that fits in the polynomial*/
		Upperlimit,			/*variable 'Upperlimit' is an input value that is read from the file which is used as the final limit in finding the roots*/
		Lowerlimit,			/*variable 'Lowerlimit' is an input value that is read from the file which is used as a limit in finding the roots*/
		Lowerlimit2,		/*variable 'Lowerlimit2' is an input value that has an added 0.1 to its value as a second point in finding the root*/
		midpoint,			/*variable 'midpoint' is the midpoint of the lower and upper limit for when the sign changes with fx and fxh*/
		fx,					/*function x*/
		fxh,				/*function x+h*/
		f_mid;				/*function midpoint used in bisection method*/

	/*Checks to see if the file is at the location*/
	if ((error = fopen_s(&input1, "D:\\C3181550PA1\\C3181550PA1\\input1.dat", "r") != NULL))
	{
		printf("File cannot be found or opened");
		return 0;
	}

	/*loops the file that scans the values of b, c, d, e, Lowerlimit, Upperlimit until the end of the file*/
	while (fscanf_s(input1, "%lf%lf%lf%lf%lf%lf", &b, &c, &d, &e, &Lowerlimit, &Upperlimit) != EOF)
	{
		
		printf("For quadratic polynomial a = %lf; b = %lf; c = %lf; d = %lf; e = %lf; \n", A_VAR, b, c, d, e);
		printf("With range from %lf to %lf\n", Lowerlimit, Upperlimit);
		printf("Gives F(x) = zero at the following values x\nx = ");
		distinctroot = 0;	/*Default value for distinctroots*/

		/*The do loop is used to loop a set of values inputted from the file that will loop until Lower limit exceeds the Upper limit*/
		do {
			fx = polynomial(b, c, d, e, Lowerlimit);	/*fx is calculated by the values being sent and calculated in the function polynomial*/
			Lowerlimit2 = Lowerlimit + H;				/*Adding 0.1 to lowerlimit for the second limit that is being tested*/
			fxh = polynomial(b, c, d, e, Lowerlimit2);	/*fxh is calculated by the values being sent and calculated in the function polynomial*/

				/*If statement is used to check if there is a sign change between fx and fxh.
				 *Then our two limits which the sign change was found between, is put into the bisection method to get our midpoint limit
				 *which is then is used in find the f_mid quadratic function*/
				 if ((fx < 0.0 && fxh > 0.0) || (fx > 0.0 && fxh < 0.0)) {
					 /*This do loop is used to find the f_mid at zero*/
					 do {
							midpoint = Bisection_method(Lowerlimit, Lowerlimit2);	/*midpoint is calculated by the values being sent and calculated in the function Bisection_methof*/
							f_mid = polynomial(b, c, d, e, midpoint);				/*f_mid is calculated by the values being calculated in the function polynomial*/

						/*This if statement is checking whether there is a sign change between f_mid and fx*/
						if ((f_mid < 0.0 && fx > 0.0) || (f_mid > 0.0 && fx < 0.0)) {
							Lowerlimit2 = midpoint;	/*replaces the current midpoint with the lowerlimit2*/
						}
						/*This else if statement is checking whether there is a sign change between f_mid and fxh*/
						else if ((f_mid < 0.0 && fxh > 0.0) || (f_mid > 0.0 && fxh < 0.0)) {
							Lowerlimit = midpoint;	/*replaces the current midpoint with the Lowerlimit*/
						}
						
					} while (f_mid > PRECISION || f_mid < -PRECISION);	/*Ends the do loop when f_mid is in range of 0.000001 to zero and -0.000001 to zero*/

				printf("%.5f, ", midpoint);
				distinctroot++;					/*Counter for how many distinct roots there are for each set of data inputted from the file*/
			}  
			 Lowerlimit = Lowerlimit2;			/*Makes the current lowerlimit, the lowerlimit2 for the next set of testing values*/
		} while (Lowerlimit <= Upperlimit);		/*Ends the do loop when the lowerlimit exceeds the upperlimit for the set of data*/
		printf("\n%d distinct roots found\n\n\n", distinctroot);
	
	}
	fclose(input1);	/*This will close the file called 'input1'*/
    return 0;
}

/*Function 'polynomial'
 *This function will calculate the f(x), f(x+h) and f_midpoint values
 *Inputs : b, c, d, e, Lowerlimit, Upperlimit
 *outputs : function values for fx, fxh and f_mid
 */

double polynomial(double b, double c, double d, double e, double Lowerlimit)
{
		return(A_VAR*Lowerlimit*Lowerlimit*Lowerlimit*Lowerlimit + b*Lowerlimit*Lowerlimit*Lowerlimit + c*Lowerlimit*Lowerlimit + d*Lowerlimit + e);
}

/*Function ' Bisection_method
 *This function calculates the midpoint between the current limits of Lowerlimit and Lowerlimit2
 *Inputs: Lowerlimit and Lowerlimit2
 *Outputs: the value for midpoint
 */
double Bisection_method(double interval_A, double interval_B)
{
	return((interval_A + interval_B) / 2);
}
